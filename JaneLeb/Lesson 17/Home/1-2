/*
Создай класс Fraction (обыкновенная дробь).
Добавь конструктор,
 который будет принимать два целых числа
 и добавлять объекту атрибуты - числитель и знаменатель.

 Добавь метод print,
 который будет выводить текстовое представление объекта в формате :
 «Дробь{ числитель } / {знаменатель}»,
 например «Дробь 1 / 2».

Переопредели методы арифметических операций
сложение,
вычитание,
умножение,
деление(/ ).

А также сравнение 
<
>
<=
>=
==
!=

Методы должны возвращать объект класса Fraction -
новую дробь равную результату выполнения арифметической операции
с двумя исходными дробями.

Считай с клавиатуры четыре целых числа -
числитель и знаменатель первой дроби
и числитель и знаменатель второй дроби.

Создай экземпляры класса Fraction с параметрами считанными с клавиатуры.
Выведи результаты арифметических операций
сложение,
вычитание,
умножение,
деление(/ ) этих дробей.

А также сравнение 
<
>
<=
>=
==
!=

Входные данные :
Вводится четыре строки,
каждая строка содержит целое число -
числитель и знаменатель первой дроби и
числитель и знаменатель второй дроби.
//
Выходные данные :
Выводится 4 строки в формате «Дробь{ числитель } / {знаменатель}» без кавычек.
Пример работы программы :
//Входные данные :
//2
//4
//1
//4
//Выходные данные :
//Дробь 3 / 4
//Дробь 1 / 4
//Дробь 1 / 8
//Дробь 2 / 1
*/
#include <iostream>
#include <math.h>
using namespace std;

int NOD(int, int);

class Fraction
{
public:
//Поля
    int num;
    int den;
public:
//Методы
    void print()const;
    Fraction(int, int);
    int get_common_denomanator(int, int)const;
    Fraction operator + (const Fraction&) const;
    Fraction operator - (const Fraction&) const;
    Fraction operator * (const Fraction&) const;
    Fraction operator / (const Fraction&) const;
    bool operator == (const Fraction&) const;
    bool operator != (const Fraction&) const;
    bool operator <  (const Fraction&) const;
    bool operator > (const Fraction&) const;
    bool operator >= (const Fraction& c2) const;
    bool operator <= (const Fraction& c2) const;
};

int main()
{
    setlocale(LC_ALL, "ru");
    int num, den;
    std::cout << "Ведите числитель первой дроби: целое положительное или отрицательное число:" << std::endl;
    std::cin >> num;
    std::cout << "Ведите знаменатель первой дроби: целое положительное число не равное нулю:" << std::endl;
    std::cin >> den;

    Fraction fraction1(num, den);
    fraction1.print();
    std::cout << std::endl;

    std::cout << "Ведите числитель второй дроби: целое положительное или отрицательное число:" << std::endl;
    std::cin >> num;
    std::cout << "Ведите знаменатель второй дроби:целое положительное число, не равное нулю:" << std::endl;
    std::cin >> den;

    Fraction fraction2(num, den);
    fraction2.print();
    std::cout << std::endl;

    Fraction fraction3 = fraction1 + fraction2;
    std::cout << "Результат сложения:\t ";
    fraction1.print();
    std::cout << " + ";
    fraction2.print();
    std::cout << " = ";
    fraction3.print();

    Fraction fraction3 = fraction1 - fraction2;
    std::cout << "\nРезультат вычитания:\t ";
    fraction1.print();
    std::cout << " - ";
    fraction2.print();
    std::cout << " = ";
    fraction3.print();

    Fraction fraction3 = fraction1 * fraction2;
    std::cout << "\nРезультат умножения:\t ";
    fraction1.print();
    std::cout << " * ";
    fraction2.print();
    std::cout << " = ";
    fraction3.print();

    Fraction fraction3 = fraction1 / fraction2;
    std::cout << "\nРезультат деления:\t ";
    fraction1.print();
    std::cout << " / ";
    fraction2.print();
    std::cout << " = ";
    fraction3.print();

    std::cout << "\nРезультат сравнения:\n";
    std::cout << std::endl;

    bool res;
    res = (fraction1 == fraction2);
    std::cout  << "\nРезультат ==  " << "\t" << res << "\t" << " ";
    if (res)
    {
        fraction1.print();
        std::cout << " равно ";
        fraction2.print();
    }

    res = (fraction1 != fraction2);
    std::cout << "\nРезультат !=  " << "\t" << res << "\t" << " ";
    if (res)
    {       
        fraction1.print();
        std::cout << "не равно ";
        fraction2.print();       
    }

    res = (fraction1 > fraction2);
    std::cout << "\nРезультат >  " << "\t" << res << "\t" << " ";
    if (res)
    {       
        fraction1.print();
        std::cout << " больше чем ";
        fraction2.print();       
    }

    res = (fraction1 < fraction2);
    std::cout << "\nРезультат <  " << "\t" << res << "\t" << " ";
    if (res)
    {
        fraction1.print();
        std::cout << " меньше чем ";
        fraction2.print();        
    }

    res = (fraction1 <= fraction2);
    std::cout << "\nРезультат <=  " << "\t" << res << "\t" << " ";
    if (res)
    {      
        fraction1.print();
        std::cout << "меньше, либо равно ";
        fraction2.print();        
    }

    res = (fraction1 >= fraction2);
    std::cout << "\nРезультат >=  " << "\t" << res << "\t" << " ";
    if (res)
    {   
        fraction1.print();
        std::cout << " больше, либо равно ";
        fraction2.print();        
    }
}

int NOD(int a, int b)
{
    a = std::abs(a);
    b = std::abs(b);
    while (a > 0 && b > 0)
    {
        if (a > b)
        {
            a %= b;
        }
        else
        {
            b %= a;
        }
    }
    return a + b;
}

void Fraction:: print() const
{
    if (num == den || num == 0 || den == 1)
    {
        std::cout << num << " ";
        std::cout << "(" << num << "/" << den << ")" << " ";
    }
    else if (num > den) {
        int mixedNumeral = num / den;
        std::cout << mixedNumeral << " и " << num % den << "/" << den << " " << "(" << num << "/" << den << ")" << " ";
    }
    else {
        std::cout << num << "/" << den << " ";
    }
}

Fraction::Fraction(int n, int d)
{
    if (d < 0) {
        d = std::abs(d);
        n = n * -1;
    }

    const int nod = NOD(n, d);
    num = n / nod;
    den = d / nod;
}

int Fraction::get_common_denomanator(int den1, int den2) const
{
    int common_den = den1 * den2 / NOD(den1, den2);
    return common_den;
}

Fraction Fraction::operator + (const Fraction& c2) const
{
    int common_den = get_common_denomanator(this->den, c2.den);
    int num = common_den / this->den * this->num + common_den / c2.den * c2.num;
    return Fraction(num, common_den);
}

Fraction Fraction::operator - (const Fraction& c2) const
{
    int common_den = get_common_denomanator(this->den, c2.den);
    int num = common_den / this->den * this->num - common_den / c2.den * c2.num;
    return Fraction(num, common_den);
}

Fraction Fraction::operator * (const Fraction& c2) const
{
    int den = this->den * c2.den;
    int num = this->num * c2.num;
    return Fraction(num, den);
}

Fraction Fraction:: operator / (const Fraction& c2) const
{
    int den = this->den * c2.num;
    int num = this->num * c2.den;
    return Fraction(num, den);
}

bool Fraction:: operator == (const Fraction& c2) const
{
    return this->num == c2.num && this->den == c2.den;
}

bool Fraction:: operator != (const Fraction& c2) const
{
    if ((*this) == c2)
    {
        return false;
    }
    return true;
}

bool Fraction:: operator <  (const Fraction& c2) const
{
    if ((*this) == c2)
    {
        return false;
    }

    Fraction c3 = *(this) - c2;

    if (c3.num < 0)
    {
        return true;
    }
    return false;
}

bool Fraction::operator > (const Fraction& c2) const
{
    if ((*this) == c2)
    {
        return false;
    }
    if ((*this) < c2)
    {
        return false;
    }
    return true;
}

bool Fraction:: operator >= (const Fraction& c2) const
{
    if ((*this) < c2)
    {
        return false;
    }
    return true;
}

bool Fraction::operator <= (const Fraction& c2) const
{
    if ((*this) > c2)
    {
        return false;
    }
    return true;
}
