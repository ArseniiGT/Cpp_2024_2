//Задача 4 : 
// Создайте шаблонный класс Stack, 
// представляющий стек.
// Реализуйте методы push и pop 
// для добавления и извлечения элементов из стека.
// Протестируйте класс с разными типами данных.
//
//Пример работы программы :
//Входные данные :
//intStack.push(10);
//intStack.push(20);
//вывод инт.стэка
//
//strStack.push(“Hello”);
//вывод стр.стэка
//Выходные данные :
//20
//10
//Hello

#include <iostream>
#include <string>
#include <cctype>
template <class Type>
class CStack
{
public:
    CStack();
    bool IsEmpty();
    bool IsFull();
    bool Push(const Type& item);
    bool Pop(Type& item);
    void Show();

private:
    enum { MAX = 10 };
    Type items[MAX];
    int top;
};

template <class Type>
CStack<Type>::CStack()
{
    top = 0;
}

template <class Type>
bool CStack<Type>::IsEmpty()
{
    return top == 0;
}

template <class Type>
bool CStack<Type>::IsFull()
{
    return top == MAX;
}

template <class Type>
bool CStack<Type>::Push(const Type& item)
{
    if (top < MAX)
    {
        items[top++] = item;
        return true;
    }
    else
    {
        return false;
    }
}

template <class Type>
bool CStack<Type>::Pop(Type& item)
{
    if (top > 0)
    {
        item = items[--top];
        return true;
    }
    else
    {
        return false;
    }
}

template <class Type>
void CStack<Type>::Show()
{
    for (int i = 0; i < top; i++)
    {
        std::cout << items[i] << std::endl;
    }
}

int main()
{
    setlocale(LC_ALL, "ru");  
  
    CStack<int> intStack;
    intStack.Push(10);
    intStack.Push(20);
    intStack.Show();

    CStack<std::string> strStack;
    strStack.Push("Hello");
    strStack.Show();
}
